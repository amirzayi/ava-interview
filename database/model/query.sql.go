// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package model

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
user (NAME, PHONE)
VALUES
    (?, ?)
RETURNING id, name, phone
`

type CreateUserParams struct {
	Name  string         `json:"name"`
	Phone sql.NullString `json:"phone"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Phone)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Phone)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM
    user
WHERE
    ID = ?
LIMIT 1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    id, name, phone
FROM
    user
WHERE
    ID = ?
LIMIT
    1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Phone)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, name, phone
FROM
    user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
